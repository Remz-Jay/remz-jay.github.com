<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Rem.co Blog]]></title>
  <link href="http://blog.rem.co/atom.xml" rel="self"/>
  <link href="http://blog.rem.co/"/>
  <updated>2013-12-16T14:44:23+01:00</updated>
  <id>http://blog.rem.co/</id>
  <author>
    <name><![CDATA[Remco Overdijk]]></name>
    <email><![CDATA[remco@rem.co]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing 'Error opening terminal: screen-256color.']]></title>
    <link href="http://blog.rem.co/blog/2013/06/06/fixing-error-opening-terminal-screen-256color-dot/"/>
    <updated>2013-06-06T00:00:00+02:00</updated>
    <id>http://blog.rem.co/blog/2013/06/06/fixing-error-opening-terminal-screen-256color-dot</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using <code>tmux</code> or <code>screen</code> as a wrapper for your terminal sessions (such as when using the <a href="http://www.drbunsen.org/the-text-triumvirate/">Text Triumvirate</a>), chances are that you are presented with the following error when you invoke a command that uses 256 color mode (such as <code>multitail</code> or <code>htop</code>):</p>

<pre><code>Error opening terminal: screen-256color.
</code></pre>

<p>I don&rsquo;t know if this is the recommended solution, but it&rsquo;s a pretty quick fix and seems to work on multiple distributions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /usr/share/terminfo/
</span><span class='line'>cp x/xterm-256color s/screen-256color</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OnApp: Using PHP to launch a VNC connection]]></title>
    <link href="http://blog.rem.co/blog/2013/03/01/onapp-using-php-to-launch-a-vnc-connection/"/>
    <updated>2013-03-01T12:48:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/03/01/onapp-using-php-to-launch-a-vnc-connection</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re an <a href="http://onapp.com/">OnApp</a> user you probably know you can make a VNC connection to your VM&rsquo;s using the Control Panel.
This uses a java applet in your browser as the VNC client.</p>

<p>Wouldn&rsquo;t it be nice to use your own VNC client (like <a href="http://www.nulana.com/remotix-mac">Remotix</a>) instead?</p>

<p>In fact, you can, but OnApp spawns a VNC server on a (somewhat) random port and a new random VNC password for each sessions which you&rsquo;ll have to figure out before setting up your connection.</p>

<p>According to the <a href="https://onapp.zendesk.com/entries/22068371-use-own-vnc-client-instead-of-the-onapp-console">OnApp Helpdesk</a> you can use these calls to get the required information:</p>

<pre><code>GET /virtual_machines/:virtual_machine_id/console.xml
GET /virtual_machines/:virtual_machine_id/console.json
</code></pre>

<p>As I&rsquo;m lazy I didn&rsquo;t want to do this manually every time, so I devised a little PHP script that can aid in finding the right information:</p>

<!-- more -->


<p></p>

<figure class='code'><figcaption><span>OnApp VNC Initiator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * GET /virtual_machines/:virtual_machine_id/console.xml</span>
</span><span class='line'><span class="sd"> * GET /virtual_machines/:id.xml</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * The first will start the console session and give you the port number to connect to.</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * The second call, you are looking for remote_access_password.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="nv">$CPURL</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// Insert the IP/hostname for your OnApp CP here</span>
</span><span class='line'><span class="nv">$VMID</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// Insert the VM&#39;s unique ID here</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// Insert your own username here</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// Insert the password for your account here</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ch</span> <span class="o">=</span> <span class="nb">curl_init</span><span class="p">(</span><span class="s2">&quot;http://</span><span class="si">{</span><span class="nv">$CPURL</span><span class="si">}</span><span class="s2">/virtual_machines/</span><span class="si">{</span><span class="nv">$VMID</span><span class="si">}</span><span class="s2">/console.json&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_USERPWD</span><span class="p">,</span> <span class="nv">$username</span> <span class="o">.</span> <span class="s2">&quot;:&quot;</span> <span class="o">.</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_RETURNTRANSFER</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="nv">$set_one</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="nb">curl_setopt</span><span class="p">(</span><span class="nv">$ch</span><span class="p">,</span> <span class="nx">CURLOPT_URL</span><span class="p">,</span> <span class="s2">&quot;http://</span><span class="si">{</span><span class="nv">$CPURL</span><span class="si">}</span><span class="s2">/virtual_machines/</span><span class="si">{</span><span class="nv">$VMID</span><span class="si">}</span><span class="s2">.json&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$result</span> <span class="o">=</span> <span class="nb">curl_exec</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="nv">$set_two</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$result</span><span class="p">);</span>
</span><span class='line'><span class="nv">$port</span> <span class="o">=</span> <span class="nv">$set_one</span><span class="o">-&gt;</span><span class="na">remote_access_session</span><span class="o">-&gt;</span><span class="na">port</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;PORT:</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$set_one</span><span class="o">-&gt;</span><span class="na">remote_access_session</span><span class="o">-&gt;</span><span class="na">port</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;REMOTE_KEY:</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$set_one</span><span class="o">-&gt;</span><span class="na">remote_access_session</span><span class="o">-&gt;</span><span class="na">remote_key</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nv">$rap</span> <span class="o">=</span> <span class="nv">$set_two</span><span class="o">-&gt;</span><span class="na">virtual_machine</span><span class="o">-&gt;</span><span class="na">remote_access_password</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;REMOTE_ACCESS_PASSWORD:</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$rap</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nv">$un</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$pw</span> <span class="o">=</span> <span class="nv">$set_two</span><span class="o">-&gt;</span><span class="na">virtual_machine</span><span class="o">-&gt;</span><span class="na">initial_root_password</span><span class="p">;</span>
</span><span class='line'><span class="k">echo</span> <span class="s2">&quot;ROOTPASS:</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$pw</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nb">curl_close</span><span class="p">(</span><span class="nv">$ch</span><span class="p">);</span>
</span><span class='line'><span class="nv">$constructedURL</span> <span class="o">=</span> <span class="s2">&quot;vnc://</span><span class="si">{</span><span class="nv">$CPURL</span><span class="si">}</span><span class="s2">:</span><span class="si">{</span><span class="nv">$port</span><span class="si">}</span><span class="s2">/?vncPassword=&quot;</span> <span class="o">.</span> <span class="nb">urlencode</span><span class="p">(</span><span class="nv">$rap</span><span class="p">);</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$constructedURL</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">;</span>
</span><span class='line'><span class="nb">shell_exec</span><span class="p">(</span><span class="s2">&quot;open &quot;</span> <span class="o">.</span> <span class="nv">$constructedURL</span><span class="p">);</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<ul>
<li>Using the PHP CLI: Run <code>$ php OnAppInitiator.php</code></li>
<li>The script will display all the information required and open up your default VNC client.</li>
</ul>


<h3>Caveats</h3>

<ul>
<li>This script assumes that you have the <a href="http://php.net/manual/en/book.curl.php">PHP cURL extension</a> installed and enabled.</li>
<li>The script is currently HTTP only as it&rsquo;s hard coded. With a little modification you can get HTTPS if your setup uses/requires that.</li>
<li>You can get the VM&rsquo;s unique ID in the OnApp CP. If you go to the VM&rsquo;s detail page the URL for that page will look like <code>http://cloud.setup/virtual_machines/dfa2bcguwd9mbi</code>. The ID is evertyhing after the last <code>/</code>.</li>
<li>The <code>open</code> call on the last line might not work on your OS; This script was developed/tested on Mac OSX.</li>
<li>In order to <code>open</code> a <code>VNC://</code> link you&rsquo;ll have to specify a link handler on the OS. I used <a href="http://www.rubicode.com/Software/RCDefaultApp/">RCDefaultApp</a> on OSX to set Remotix as the default link handler for VNC links.</li>
</ul>


<h3>Future / TODO</h3>

<p>The script is pretty crude in it&rsquo;s current state but it gets the job done for my day to day needs.</p>

<p>I might fix a couple of things in the near future:</p>

<ul>
<li>Grabbing the required variables such as VMID from the run parameters</li>
<li>Make the script ask for these required variables</li>
<li>Fix the script for use with HTTPS</li>
<li>Integrate this script with the OnApp CP so you can start your VNC client right from the CP</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux: Allowing SSH public key authentication]]></title>
    <link href="http://blog.rem.co/blog/2013/02/19/selinux-allowing-ssh-public-key-authentication/"/>
    <updated>2013-02-19T17:03:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/02/19/selinux-allowing-ssh-public-key-authentication</id>
    <content type="html"><![CDATA[<h3>The issue</h3>

<p>I experienced a seemingly weird issue with a freshly installed CentOS server today.</p>

<p>SSH Public key authentication was correctly set up; The <code>sshd_config</code> was properly configured and a <code>~/.ssh/authorized_keys</code> was present with the correct rights and verified correct contents (as the file was yanked from another, working, server with <code>scp</code>).</p>

<p>All attempts to connect to the machine using key authentication silently failed however.</p>

<!-- more -->


<p>
After debugging the usual <code>sshd</code> stuff i noticed the following entries in <code>/var/log/audit/audit.log</code>:</p>

<pre><code>type=USER_AUTH msg=audit(1361289386.691:2344): user pid=22997 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=pubkey acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=failed'
type=USER_AUTH msg=audit(1361289386.700:2347): user pid=22997 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=pubkey acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=failed'
</code></pre>

<p>Turns out that SELinux was interfering with the key authentication because there was no security context for the newly created <code>~/.ssh</code> directory.</p>

<h3>The solution</h3>

<p>The fix is pretty easy:</p>

<pre><code>$ restorecon -R -v /root/.ssh
</code></pre>

<p>After which key authentication started working and the messages in <code>audit.log</code> changed to:</p>

<pre><code>type=USER_AUTH msg=audit(1361289395.365:2351): user pid=22997 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=success acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=success'
type=USER_AUTH msg=audit(1361289715.705:2378): user pid=23033 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=pubkey_auth rport=41104 acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=? res=success'
type=USER_AUTH msg=audit(1361289715.705:2379): user pid=23033 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=key algo=ssh-rsa size=1023 fp=a4:5c:4d:16:61:8c:af:7f:ea:c7:95:ec:15:a9:20:66 rport=41104 acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=? res=success'
type=USER_AUTH msg=audit(1361289715.714:2382): user pid=23033 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=success acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=success'
</code></pre>

<p>Win!</p>

<blockquote><p>No actual IP addresses or fingerprints were harmed during the creation of this article.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Automatically selecting a fast mirror]]></title>
    <link href="http://blog.rem.co/blog/2013/01/22/ubuntu-automatically-selecting-a-fast-mirror/"/>
    <updated>2013-01-22T12:04:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/22/ubuntu-automatically-selecting-a-fast-mirror</id>
    <content type="html"><![CDATA[<p>Letting Ubuntu pick the <code>apt-get</code> mirror closest to you is pretty easy.</p>

<p>Just add these mirror directives to the top of <code>/etc/apt/sources.list</code> and you&rsquo;re good to go:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse
</span><span class='line'>deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse
</span><span class='line'>deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse
</span><span class='line'>deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Munin: failing with Storable error]]></title>
    <link href="http://blog.rem.co/blog/2013/01/21/munin-failing-with-storable-error/"/>
    <updated>2013-01-21T17:29:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/21/munin-failing-with-storable-error</id>
    <content type="html"><![CDATA[<p>I suffered from a Munin version 2.0.10 installation that refused to update the majority of the graphs. Only the first two of a long list were being updated, the rest all &lsquo;hung&rsquo; at the same moment.</p>

<p>After a little investigating, the problem surfaced:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>su - munin --shell<span class="o">=</span>/bin/bash munin-cron
</span><span class='line'>File is not a perl storable at blib/lib/Storable.pm <span class="o">(</span>autosplit into blib/lib/auto/Storable/fd_retrieve.al<span class="o">)</span> line 398, at /usr/lib64/perl5/vendor_perl/5.12.4/Munin/Master/Utils.pm line 362
</span><span class='line'>File is not a perl storable at blib/lib/Storable.pm <span class="o">(</span>autosplit into blib/lib/auto/Storable/fd_retrieve.al<span class="o">)</span> line 398, at /usr/lib64/perl5/vendor_perl/5.12.4/Munin/Master/Utils.pm line 362
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>I started out by fixing all items the <code>munin-check</code> script suggested, which is always a good starting point.
Execute the script in a similar fashion as you would do with <code>munin-cron</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>su - munin --shell<span class="o">=</span>/bin/bash munin-check
</span></code></pre></td></tr></table></div></figure>


<p>Correct all reported errors and check your cron again.</p>

<p>In this particular case this didn&rsquo;t solve the issue however. There appeared to be some <code>.storable</code> files in the munin directory, which sounded like viable suspects according to the error messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>find /var/lib/munin/ -type f | grep storable
</span><span class='line'>/var/lib/munin/datafile.storable
</span><span class='line'>/var/lib/munin/htmlconf.storable
</span><span class='line'>/var/lib/munin/limits.storable
</span><span class='line'>/var/lib/munin/state-server-server.storable
</span></code></pre></td></tr></table></div></figure>


<p>Turns out one of these was the culprit, as moving/deleting them fixed the issue; cron has resumed normal operation.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /var/lib/munin/ <span class="o">&amp;&amp;</span> mv *.storable ~
</span><span class='line'><span class="nv">$ </span>su - munin --shell<span class="o">=</span>/bin/bash munin-cron
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Best part of it is that the data collection doesn&rsquo;t seem to have been interrupted in the meantime; All graphs are up2date and have a complete history. Problem solved!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo: Updating and Cleaning]]></title>
    <link href="http://blog.rem.co/blog/2013/01/16/updating-and-cleaning-your-gentoo-linux-server/"/>
    <updated>2013-01-16T23:40:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/16/updating-and-cleaning-your-gentoo-linux-server</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://www.gentoo.org/images/gblend.png" width="100" height="100"> Keeping your Gentoo Linux server up to date isn&rsquo;t as straightforward as let&rsquo;s say an Ubuntu box, where you would just run <code>$ apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get clean</code> for example.</p>

<p>Gentoo is far too flexible for a <em>one size fits all</em> approach. The commands outlined below come pretty close for daily use though:</p>

<div><script src='https://gist.github.com/2835011.js'></script>
<noscript><pre><code></code></pre></noscript></div>




<!-- more -->


<p>We start by syncing the portage tree, required to obtain the latest packages.
After which we update the &ldquo;world&rdquo; group (which would entail all packages currently installed) with a couple of options:</p>

<p>-u : Update</p>

<p>-D : Deep, includes updates to prerequisites for packages registered in your world favorites</p>

<p>-N : NewUSE, checks for changes to your USE flags (usually registered in <code>/etc/make.conf</code>or <code>/etc/portage/package.use</code>)</p>

<p>-a : Ask, will show a dialog asking you of the packages to be merged are OK with you. Very useful when you invoke these commands manually, as I do every day. It gives you a last minute escape in case some crucial (like <code>sys-fs/udev</code>) or large (like <code>sys-devel/gcc</code>) package is about to be merged which you really aren&rsquo;t in the mood for.</p>

<p>-v : Verbose, gives more useful output, including the selected USE flags for packages. (Which enables you to spot obvious errors early on).</p>

<p>&mdash;with-bdeps=y : Includes build time dependencies, and is useful for solving some common merge errors. (This can also be done by setting <code>EMERGE_DEFAULT_OPTS="--with-bdeps=y"</code> in <code>/etc/make.conf</code>)</p>

<p>That should suffice to update about every update-able package on your system.</p>

<p><strong>Always make sure to read <em>and follow</em> the instructions that appear after the merge!</strong><br/>
This is exactly why the second line is mentioned separately and isn&rsquo;t concatenated after the first; It gives you opportunity to execute the required steps for crucial packages that might otherwise break your system.</p>

<p>After that we proceed with some basic cleanup:</p>

<ul>
<li>Remove obsolete packages with <code>emerge --depclean</code>.</li>
<li>Check for broken dependencies/links with <code>revdep-rebuild</code>which will automatically fix the issues.</li>
<li>Delete obsolete distfiles (downloaded source packages, required to merge the binaries) for packages that no longer exist on the system with <code>eclean-dist</code>.</li>
</ul>


<p>Running the sequence above on a regular schedule should ensure that you have a smooth running system!</p>

<p>Got improvements or comments on the procedure outlined above? I&rsquo;d love to hear them in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2013: Blogging with Octopress]]></title>
    <link href="http://blog.rem.co/blog/2013/01/16/2013-blogging-with-octopress/"/>
    <updated>2013-01-16T20:06:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/16/2013-blogging-with-octopress</id>
    <content type="html"><![CDATA[<p>Well. Here we are!</p>

<p>New year, new approach to blogging.</p>

<p>In the past year I haven&rsquo;t managed to push out a lot of blog articles though I&rsquo;ve been working with loads of new, interesting technologies and approaches.</p>

<p>Being a programmer, I blame the software I use to blog. In my case that&rsquo;s the <a href="http://www.typo3.org">TYPO3</a> installation at <a href="https://rem.co">rem.co</a>. It&rsquo;s recently been updated to TYPO3 6.0, and I haven&rsquo;t gotten around to fixing all the bugs that appeared after such a major upgrade.</p>

<p>Moreover, that site uses the ancient tt_news plugin as a blog substitute, which makes blogging a bit… troublesome to put it mildly. Especially &ldquo;<em>advanced</em>&rdquo; stuff like including code snippets and multiple layouts in one article.</p>

<p><img class="left" src="http://octopress.org/images/logo.png">
Then <a href="http://octopress.org">Octopress</a> enters the stage, combining a lot of my favorite technologies to provide a somewhat nerdy approach to blogging.</p>

<!-- more -->


<p>
<em>Why haven&rsquo;t I tried this before?</em></p>

<p>It uses <a href="http://git-scm.com/">Git</a> as VCS <strong>and</strong> distribution system, publishes to <a href="https://github.com/Remz-Jay">Github</a> and <a href="http://pages.github.com/">Github Pages</a> and uses <a href="http://daringfireball.net/projects/markdown/syntax">markdown</a> to render my blog post ramblings, which in turn enables me to use the Mac OSX app <a href="http://www.markdownpro.com/">Markdown Pro</a> to quickly type up an article about a brilliant code snippet that I just came up with in an off-line fashion.<br/>
<em>What can go wrong, right?</em></p>

<p>Oh, yeah, and then there&rsquo;s one last thing. Traditionally, my website has always been hosted on my own bare metal server. Most stuff on that machine is highly unstable and/or experimental, so <a href="https://rem.co">rem.co</a>&rsquo;s uptime hasn&rsquo;t been exemplary over the past few years, and probably never will be. Well, blog.rem.co is actually hosted by Github, so my gentoo, shorewall, nginx, varnish and apache experiments should no longer prevent you from reading the blog!</p>

<p>Well, let&rsquo;s see how long I can keep this up and if ye olde TYPO3 blog can be retired in favor of this one..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL: Boolean substitution]]></title>
    <link href="http://blog.rem.co/blog/2009/04/27/mysql-boolean-substitution/"/>
    <updated>2009-04-27T00:00:00+02:00</updated>
    <id>http://blog.rem.co/blog/2009/04/27/mysql-boolean-substitution</id>
    <content type="html"><![CDATA[<p>Today I faced a quite interesting problem, that originated from pure laziness.
I&rsquo;m developing a backend system for a quite complex database structure. Within this backend, an almost limitless amount of table views have to be created for the end user. Because I&rsquo;m extremely lazy, and didn&rsquo;t want to develop the html view code for each table view, I created a PHP html-table-generator-class, which takes a <code>mysql_result_set</code> as parameter, and outputs the html table in string format.</p>

<p>This method works great, unless for some cases, where a value in the query has to be substituted by a user readable value. A boolean is a good example of such a value.</p>

<!-- more -->


<h3>Booleans in MySQL</h3>

<p>Since MySQL doesn&rsquo;t natively support boolean values, there are various methods of saving booleans to a database. Common practices include fields of the format <code>CHAR(1)</code>, <code>TINYINT(1)</code> and <code>ENUM('Y','N')</code>. Recent versions of MySQL also include the <code>BIT</code> field format, which in fact boils down to using <code>TINYINT(1)</code>, when it comes to boolean values.</p>

<p>I always use the <code>TINYINT(1)</code> field format for my boolean columns. This works perfectly, since you can <code>INSERT</code> true/false values, which are automatically transformed to 1/0. When you <code>SELECT</code> a boolean column in PHP, this also works, since you can compare true/false to 1/0 within PHP. (Whether this loose type handling is preferable is a discussion for another time).</p>

<p>However.. when you <code>SELECT</code> a boolean column, and run it through a generic html table generator class such as mine, you&rsquo;ll end up with a nice table showing 1&rsquo;s and 0&rsquo;s, which aren&rsquo;t very user friendly (Having in mind that most backend users aren&rsquo;t quite as computer savvy as you are!). Replacing all 1&rsquo;s and 0&rsquo;s within the PHP code was not an option, since it would be a generic measure, and would also transform ID&rsquo;s and Prices and such. So I had to come up with a solution to substitute the boolean values within the MySQL result by human readable values.</p>

<h2>Substituting boolean values within a MySQL SELECT query</h2>

<p>The solution is in fact, as they usually are, quite simple. MySQL supports the use of the <code>REPLACE()</code> SQL command. Usually this command is used to <code>UPDATE</code> tables with replacement values, but it also works within a <code>SELECT</code> query to alter results. Having this in mind I started out replacing one value in the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">REPLACE</span><span class="p">(</span><span class="n">boolColumn</span><span class="p">,</span><span class="s1">&#39;1&#39;</span><span class="p">,</span><span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">booleanValue</span> <span class="k">FROM</span> <span class="n">tableName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works! There&rsquo;s a slight catch though, since &lsquo;false&rsquo; values also have to be substituted. After some fiddling with <code>IF</code> and <code>AND</code> constructions, the solutions was of course a lot easier:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="k">REPLACE</span><span class="p">(</span><span class="k">REPLACE</span><span class="p">(</span><span class="n">boolColumn</span><span class="p">,</span><span class="s1">&#39;0&#39;</span><span class="p">,</span><span class="s1">&#39;false&#39;</span><span class="p">),</span><span class="s1">&#39;1&#39;</span><span class="p">,</span><span class="s1">&#39;true&#39;</span><span class="p">)</span> <span class="k">AS</span> <span class="n">booleanValue</span> <span class="k">FROM</span> <span class="n">tableName</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And there you have it.. value substitution 101 in MySQL. This method also works for your other substitution needs!</p>
]]></content>
  </entry>
  
</feed>
