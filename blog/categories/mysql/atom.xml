<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mysql | Rem.co: Remco Overdijk]]></title>
  <link href="https://rem.co/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="https://rem.co/"/>
  <updated>2018-01-25T14:17:37+01:00</updated>
  <id>https://rem.co/</id>
  <author>
    <name><![CDATA[Remco Overdijk]]></name>
    <email><![CDATA[remco@rem.co]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL: The complete FULLTEXT checklist]]></title>
    <link href="https://rem.co/blog/2009/05/14/mysql-the-complete-fulltext-checklist/"/>
    <updated>2009-05-14T18:16:04+02:00</updated>
    <id>https://rem.co/blog/2009/05/14/mysql-the-complete-fulltext-checklist</id>
    <content type="html"><![CDATA[<p>In an effort to help a colleague with <code>FULLTEXT</code> search troubles today, I tried to find out everything that could go wrong with setting up this search method on a table.
My short research resulted in this checklist. Failure to comply with these checks will result in <em>catastrophic</em> failure :P</p>

<ol>
<li><p>Make sure the table you&rsquo;re trying to <code>FULLTEXT</code> on has <code>MyISAM</code> type! Currently, <code>FULLTEXT</code> searches do <strong>NOT</strong> work on InnoDB types.
If you are bound to using <code>InnoDB</code> for various reasons, you could create a duplicate table in <code>MyISAM</code> to perform your searches on. <!-- more --></p></li>
<li><p>Ensure that your tables have <code>Indexes</code> with the <code>FULLTEXT</code> type for all columns you&rsquo;re trying to perform <code>FULLTEXT</code> searches on. If you don&rsquo;t have such an index, you can easily add it by using:</p>

<pre><code> ALTER TABLE xxx ADD FULLTEXT(yyy,zzz);
</code></pre>

<p> <em>Where <code>xxx</code> is your table name, and <code>yyy</code> + <code>zzz</code> are the columns you want to search.</em> Do this for earch individual column or set of columns you want to search.</p></li>
<li><p>If you changed anything in your setup, you might want to rebuild the Indexes. This is done by issuing:</p>

<pre><code> REPAIR TABLE xxx;
</code></pre></li>
<li><p>If you are building a search function for a product catalog, it&rsquo;s likely that you have to match against short words. e.g. a product that has the name <code>16C</code>.
 <code>FULLTEXT</code> defaults to using 4 characters for the shortest possible word, so your <code>16C</code> is not a valid word, and will be omitted in search results.
 You can change this by editing your <code>my.cnf</code> (likely to reside in <code>/etc/mysql/my.cnf</code> on Linux based systems), and adding the <code>ft_min_word_len</code> directive to the appropriate sections:</p>

<pre><code> [mysqld] 
 ft_min_word_len = 2 

 [myisamchk] 
 ft_min_word_len = 2
</code></pre>

<p> Do note that shortening the minimum word length significantly increases the load on your MySQL server, so this might be a VERY bad idea on large tables/busy systems. (You might as well go back to using <code>%LIKE%</code> searches ;)).
 After you added the directives, restart MySQL (e.g. <code>/etc/init.d/mysql restart</code>), and rebuild your table indexes using the <code>REPAIR</code> command from check 3.</p></li>
<li><p><code>BLOB</code> is a commonly used fieldtype for fields that contain large bits of content. <code>BLOB</code> is a binary type though, and it disables the possibility to use <code>FULLTEXT</code> searches on fields that have the <code>BLOB</code> type.
 Solution is to convert the <code>BLOB</code> fields you want to search to the non-binary <code>TEXT</code> type. (Or any equivalent type of your choise). This can be done by issuing:</p>

<pre><code> ALTER TABLE xxx MODIFY yyy TEXT;
</code></pre>

<p> <em>Where <code>xxx</code> is the tablename and <code>yyy</code> the fieldname.</em></p></li>
<li><p>Last but not least.. make sure you have a MySQL version running that supports <code>FULLTEXT</code> searching. Basic <code>FULLTEXT</code> has been around since 3.23.23.
 If you want to use the more advanced <code>IN BOOLEAN MODE</code> directive in your <code>AGAINST()</code>, you need to have a whopping MySQL 4.1 or better available to you.
 (Just install MySQL5 and you&rsquo;re in the green!;)) If you are GO on all these checks, and it still doesn&rsquo;t work.. it might very well be your Query that&rsquo;s messed up.</p>

<p> Although the FULLTEXT basics are out of this blogposts scope , here&rsquo;s a very basic <code>FULLTEXT</code> query that should work:</p>

<pre><code> SELECT * 
 FROM xxx 
 WHERE MATCH(yyy,zzz) AGAINST ('+aaa -bbb' IN BOOLEAN MODE);
</code></pre>

<p> <em><code>xxx</code> = table, <code>yyy</code> + <code>zzz</code> are columns (make sure they&rsquo;re indexed in a group!), <code>aaa</code> + <code>bbb</code> are Strings. <code>aaa</code> will be included, <code>bbb</code> excluded.</em></p></li>
</ol>


<p> Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL: Boolean substitution]]></title>
    <link href="https://rem.co/blog/2009/04/27/mysql-boolean-substitution/"/>
    <updated>2009-04-27T00:00:00+02:00</updated>
    <id>https://rem.co/blog/2009/04/27/mysql-boolean-substitution</id>
    <content type="html"><![CDATA[<p>Today I faced a quite interesting problem, that originated from pure laziness.
I&rsquo;m developing a backend system for a quite complex database structure. Within this backend, an almost limitless amount of table views have to be created for the end user. Because I&rsquo;m extremely lazy, and didn&rsquo;t want to develop the html view code for each table view, I created a PHP html-table-generator-class, which takes a <code>mysql_result_set</code> as parameter, and outputs the html table in string format.</p>

<p>This method works great, unless for some cases, where a value in the query has to be substituted by a user readable value. A boolean is a good example of such a value.</p>

<!-- more -->


<h3>Booleans in MySQL</h3>

<p>Since MySQL doesn&rsquo;t natively support boolean values, there are various methods of saving booleans to a database. Common practices include fields of the format <code>CHAR(1)</code>, <code>TINYINT(1)</code> and <code>ENUM('Y','N')</code>. Recent versions of MySQL also include the <code>BIT</code> field format, which in fact boils down to using <code>TINYINT(1)</code>, when it comes to boolean values.</p>

<p>I always use the <code>TINYINT(1)</code> field format for my boolean columns. This works perfectly, since you can <code>INSERT</code> true/false values, which are automatically transformed to 1/0. When you <code>SELECT</code> a boolean column in PHP, this also works, since you can compare true/false to 1/0 within PHP. (Whether this loose type handling is preferable is a discussion for another time).</p>

<p>However.. when you <code>SELECT</code> a boolean column, and run it through a generic html table generator class such as mine, you&rsquo;ll end up with a nice table showing 1&rsquo;s and 0&rsquo;s, which aren&rsquo;t very user friendly (Having in mind that most backend users aren&rsquo;t quite as computer savvy as you are!). Replacing all 1&rsquo;s and 0&rsquo;s within the PHP code was not an option, since it would be a generic measure, and would also transform ID&rsquo;s and Prices and such. So I had to come up with a solution to substitute the boolean values within the MySQL result by human readable values.</p>

<h2>Substituting boolean values within a MySQL SELECT query</h2>

<p>The solution is in fact, as they usually are, quite simple. MySQL supports the use of the <code>REPLACE()</code> SQL command. Usually this command is used to <code>UPDATE</code> tables with replacement values, but it also works within a <code>SELECT</code> query to alter results. Having this in mind I started out replacing one value in the result:</p>

<pre><code class="sql">SELECT REPLACE(boolColumn,'1','true') AS booleanValue FROM tableName;
</code></pre>

<p>This works! There&rsquo;s a slight catch though, since &lsquo;false&rsquo; values also have to be substituted. After some fiddling with <code>IF</code> and <code>AND</code> constructions, the solutions was of course a lot easier:</p>

<pre><code class="sql">SELECT REPLACE(REPLACE(boolColumn,'0','false'),'1','true') AS booleanValue FROM tableName;
</code></pre>

<p>And there you have it.. value substitution 101 in MySQL. This method also works for your other substitution needs!</p>
]]></content>
  </entry>
  
</feed>
