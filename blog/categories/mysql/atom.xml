<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MySQL | The Rem.co Blog]]></title>
  <link href="http://blog.rem.co/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://blog.rem.co/"/>
  <updated>2014-01-28T10:31:40+01:00</updated>
  <id>http://blog.rem.co/</id>
  <author>
    <name><![CDATA[Remco Overdijk]]></name>
    <email><![CDATA[remco@rem.co]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL: Boolean substitution]]></title>
    <link href="http://blog.rem.co/blog/2009/04/27/mysql-boolean-substitution/"/>
    <updated>2009-04-27T00:00:00+02:00</updated>
    <id>http://blog.rem.co/blog/2009/04/27/mysql-boolean-substitution</id>
    <content type="html"><![CDATA[<p>Today I faced a quite interesting problem, that originated from pure laziness.
I&rsquo;m developing a backend system for a quite complex database structure. Within this backend, an almost limitless amount of table views have to be created for the end user. Because I&rsquo;m extremely lazy, and didn&rsquo;t want to develop the html view code for each table view, I created a PHP html-table-generator-class, which takes a <code>mysql_result_set</code> as parameter, and outputs the html table in string format.</p>

<p>This method works great, unless for some cases, where a value in the query has to be substituted by a user readable value. A boolean is a good example of such a value.</p>

<!-- more -->


<h3>Booleans in MySQL</h3>

<p>Since MySQL doesn&rsquo;t natively support boolean values, there are various methods of saving booleans to a database. Common practices include fields of the format <code>CHAR(1)</code>, <code>TINYINT(1)</code> and <code>ENUM('Y','N')</code>. Recent versions of MySQL also include the <code>BIT</code> field format, which in fact boils down to using <code>TINYINT(1)</code>, when it comes to boolean values.</p>

<p>I always use the <code>TINYINT(1)</code> field format for my boolean columns. This works perfectly, since you can <code>INSERT</code> true/false values, which are automatically transformed to 1/0. When you <code>SELECT</code> a boolean column in PHP, this also works, since you can compare true/false to 1/0 within PHP. (Whether this loose type handling is preferable is a discussion for another time).</p>

<p>However.. when you <code>SELECT</code> a boolean column, and run it through a generic html table generator class such as mine, you&rsquo;ll end up with a nice table showing 1&rsquo;s and 0&rsquo;s, which aren&rsquo;t very user friendly (Having in mind that most backend users aren&rsquo;t quite as computer savvy as you are!). Replacing all 1&rsquo;s and 0&rsquo;s within the PHP code was not an option, since it would be a generic measure, and would also transform ID&rsquo;s and Prices and such. So I had to come up with a solution to substitute the boolean values within the MySQL result by human readable values.</p>

<h2>Substituting boolean values within a MySQL SELECT query</h2>

<p>The solution is in fact, as they usually are, quite simple. MySQL supports the use of the <code>REPLACE()</code> SQL command. Usually this command is used to <code>UPDATE</code> tables with replacement values, but it also works within a <code>SELECT</code> query to alter results. Having this in mind I started out replacing one value in the result:</p>

<p><code>sql
SELECT REPLACE(boolColumn,'1','true') AS booleanValue FROM tableName;
</code></p>

<p>This works! There&rsquo;s a slight catch though, since &lsquo;false&rsquo; values also have to be substituted. After some fiddling with <code>IF</code> and <code>AND</code> constructions, the solutions was of course a lot easier:</p>

<p><code>sql
SELECT REPLACE(REPLACE(boolColumn,'0','false'),'1','true') AS booleanValue FROM tableName;
</code></p>

<p>And there you have it.. value substitution 101 in MySQL. This method also works for your other substitution needs!</p>
]]></content>
  </entry>
  
</feed>
