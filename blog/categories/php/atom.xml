<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: php | Rem.co: Remco Overdijk]]></title>
  <link href="https://rem.co/blog/categories/php/atom.xml" rel="self"/>
  <link href="https://rem.co/"/>
  <updated>2018-01-25T14:17:37+01:00</updated>
  <id>https://rem.co/</id>
  <author>
    <name><![CDATA[Remco Overdijk]]></name>
    <email><![CDATA[remco@rem.co]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OnApp: Using PHP to launch a VNC connection]]></title>
    <link href="https://rem.co/blog/2013/03/01/onapp-using-php-to-launch-a-vnc-connection/"/>
    <updated>2013-03-01T12:48:00+01:00</updated>
    <id>https://rem.co/blog/2013/03/01/onapp-using-php-to-launch-a-vnc-connection</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re an <a href="http://onapp.com/">OnApp</a> user you probably know you can make a VNC connection to your VM&rsquo;s using the Control Panel.
This uses a java applet in your browser as the VNC client.</p>

<p>Wouldn&rsquo;t it be nice to use your own VNC client (like <a href="http://www.nulana.com/remotix-mac">Remotix</a>) instead?</p>

<p>In fact, you can, but OnApp spawns a VNC server on a (somewhat) random port and a new random VNC password for each sessions which you&rsquo;ll have to figure out before setting up your connection.</p>

<p>According to the <a href="https://onapp.zendesk.com/entries/22068371-use-own-vnc-client-instead-of-the-onapp-console">OnApp Helpdesk</a> you can use these calls to get the required information:</p>

<pre><code>GET /virtual_machines/:virtual_machine_id/console.xml
GET /virtual_machines/:virtual_machine_id/console.json
</code></pre>

<p>As I&rsquo;m lazy I didn&rsquo;t want to do this manually every time, so I devised a little PHP script that can aid in finding the right information:</p>

<!-- more -->  


<pre><code class="php OnApp VNC Initiator">&lt;?php
/**
 * GET /virtual_machines/:virtual_machine_id/console.xml
 * GET /virtual_machines/:id.xml
 *
 * The first will start the console session and give you the port number to connect to.
 *
 * The second call, you are looking for remote_access_password.
 */
$CPURL = ""; // Insert the IP/hostname for your OnApp CP here
$VMID = ""; // Insert the VM's unique ID here
$username = ""; // Insert your own username here
$password = ""; // Insert the password for your account here

$ch = curl_init("http://{$CPURL}/virtual_machines/{$VMID}/console.json");

curl_setopt($ch, CURLOPT_USERPWD, $username . ":" . $password);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$result = curl_exec($ch);
$set_one = json_decode($result);
curl_setopt($ch, CURLOPT_URL, "http://{$CPURL}/virtual_machines/{$VMID}.json");
$result = curl_exec($ch);
$set_two = json_decode($result);
$port = $set_one-&gt;remote_access_session-&gt;port;
echo "PORT:\t" . $set_one-&gt;remote_access_session-&gt;port . PHP_EOL;
echo "REMOTE_KEY:\t" . $set_one-&gt;remote_access_session-&gt;remote_key . PHP_EOL;
$rap = $set_two-&gt;virtual_machine-&gt;remote_access_password;
echo "REMOTE_ACCESS_PASSWORD:\t" . $rap . PHP_EOL;
$un = "root";
$pw = $set_two-&gt;virtual_machine-&gt;initial_root_password;
echo "ROOTPASS:\t" . $pw . PHP_EOL;
curl_close($ch);
$constructedURL = "vnc://{$CPURL}:{$port}/?vncPassword=" . urlencode($rap);
echo $constructedURL . PHP_EOL;
shell_exec("open " . $constructedURL);
?&gt;
</code></pre>

<h3>Usage</h3>

<ul>
<li>Using the PHP CLI: Run <code>$ php OnAppInitiator.php</code></li>
<li>The script will display all the information required and open up your default VNC client.</li>
</ul>


<h3>Caveats</h3>

<ul>
<li>This script assumes that you have the <a href="http://php.net/manual/en/book.curl.php">PHP cURL extension</a> installed and enabled.</li>
<li>The script is currently HTTP only as it&rsquo;s hard coded. With a little modification you can get HTTPS if your setup uses/requires that.</li>
<li>You can get the VM&rsquo;s unique ID in the OnApp CP. If you go to the VM&rsquo;s detail page the URL for that page will look like <code>http://cloud.setup/virtual_machines/dfa2bcguwd9mbi</code>. The ID is evertyhing after the last <code>/</code>.</li>
<li>The <code>open</code> call on the last line might not work on your OS; This script was developed/tested on Mac OSX.</li>
<li>In order to <code>open</code> a <code>VNC://</code> link you&rsquo;ll have to specify a link handler on the OS. I used <a href="http://www.rubicode.com/Software/RCDefaultApp/">RCDefaultApp</a> on OSX to set Remotix as the default link handler for VNC links.</li>
</ul>


<h3>Future / TODO</h3>

<p>The script is pretty crude in it&rsquo;s current state but it gets the job done for my day to day needs.</p>

<p>I might fix a couple of things in the near future:</p>

<ul>
<li>Grabbing the required variables such as VMID from the run parameters</li>
<li>Make the script ask for these required variables</li>
<li>Fix the script for use with HTTPS</li>
<li>Integrate this script with the OnApp CP so you can start your VNC client right from the CP</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPMI graphs in Munin]]></title>
    <link href="https://rem.co/blog/2009/09/20/impi-graphs-in-munin/"/>
    <updated>2009-09-20T17:22:59+02:00</updated>
    <id>https://rem.co/blog/2009/09/20/impi-graphs-in-munin</id>
    <content type="html"><![CDATA[<p>It is possible to monitor fan speeds and temperatures on Dell Poweredge servers under Linux. You can achieve this by reading out the IPMI data that is available on the system.</p>

<p>I used the steps on <a href="https://hep.pa.msu.edu/twiki/bin/view/AGLT2/DellCactiSetup">this website</a> to buffer the data gathered by IPMI to use in Cacti.</p>

<p>However, in addition to Cacti I also use Munin to monitor various system parameters. Wouldn&rsquo;t it be nice to incorporate graphs for fan speeds and temperatures in Munin? I thought so, so I developed a way to do this.</p>

<p>In this case the solution consists out of 2 munin plugins and a PHP script that formats the IPMI values for graphing use. This could also be done directly in the plugins, but since I&rsquo;m not such an <code>awk</code> and <code>sed</code> expert I chose to let a PHP script handle the transformation, so I&rsquo;d be done sooner (time is money my friends!).</p>

<p> First up, the PHP script:</p>

<pre><code class="php /usr/bin/ipmi.php">#!/usr/bin/php
 &lt;?php
 $handle = fopen('/dev/shm/dell.ipmi','r');
 while(!feof($handle)) {
 $line = fgets($handle);
 if(preg_match('/AmbientTemp/',$line)) echo 'tambi.value '.fgets($handle);
 if(preg_match('/CPU1Temp/',$line)) echo 'tcpu1.value '.fgets($handle);
 if(preg_match('/CPU2Temp/',$line)) echo 'tcpu2.value '.fgets($handle);
 if(preg_match('/Fan1/',$line)) echo 'fan1.value '.fgets($handle);
 if(preg_match('/Fan2/',$line)) echo 'fan2.value '.fgets($handle);
 if(preg_match('/Fan3/',$line)) echo 'fan3.value '.fgets($handle);
 if(preg_match('/Fan4/',$line)) echo 'fan4.value '.fgets($handle);
 if(preg_match('/Fan5/',$line)) echo 'fan5.value '.fgets($handle);
 if(preg_match('/Fan6/',$line)) echo 'fan6.value '.fgets($handle);
 if(preg_match('/PlanarTemp/',$line)) echo 'tplan.value '.fgets($handle);
 if(preg_match('/RiserTemp/',$line)) echo 'trise.value '.fgets($handle);
 }
 fclose($handle);
 ?&gt;
</code></pre>

<p> With the SHM values now being prefixed with matching Munin values, we can graph them in 2 plugins:</p>

<pre><code class="bash /etc/munin/plugins/ipmitemps">#!/bin/sh
 if [ '$1' = 'autoconf' ]; then
 if [ -r /dev/shm/dell.ipmi ]; then
 echo yes
 exit 0
 else
 echo no
 exit 1
 fi 
 fi 

 if [ '$1' = 'config' ]; then
 echo 'graph_title Dell 2850 IPMI Temperatures'
 echo 'graph_order tcpu1 tcpu2 tambi tplan trise'
 echo 'graph_vlabel Temperature (Deg C)'
 echo 'graph_scale yes'
 echo 'graph_info This graph shows sensor temperatures'
 echo 'graph_category system'
 echo 'tcpu1.label CPU1'
 echo 'tcpu1.warning 80'
 echo 'tcpu1.critical 90'
 echo 'tcpu1.info XEON CPU 1 Temperature'
 echo 'tcpu2.label CPU2'
 echo 'tcpu2.warning 80'
 echo 'tcpu2.critical 90'
 echo 'tcpu2.info XEON CPU 2 Temperature'
 echo 'tambi.label Ambient'
 echo 'tambi.warning 80'
 echo 'tambi.critical 90'
 echo 'tambi.info Ambient Temperature'
 echo 'tplan.label Planar'
 echo 'tplan.warning 80'
 echo 'tplan.critical 90'
 echo 'tplan.info Planar Temperature'
 echo 'trise.label Riser'
 echo 'trise.warning 80'
 echo 'trise.critical 90'
 echo 'trise.info Riser Temperature'
 exit 0
 fi
 /usr/bin/ipmi.php
</code></pre>

<p> and</p>

<pre><code class="bash /etc/munin/plugins/ipmifans"> #!/bin/sh

 if [ '$1' = 'autoconf' ]; then
 if [ -r /dev/shm/dell.ipmi ]; then
 echo yes
 exit 0
 else
 echo no
 exit 1
 fi
 fi

 if [ '$1' = 'config' ]; then

 echo 'graph_title Dell 2850 IPMI Fanspeeds'
 echo 'graph_order fan1 fan2 fan3 fan4 fan5 fan6'
 echo 'graph_vlabel Fanspeed (RPM)'
 echo 'graph_scale yes'
 echo 'graph_info This graph shows fanspeeds'
 echo 'graph_category system'
 echo 'fan1.label Fan1'
 echo 'fan1.info Fan1 speed'
 echo 'fan2.label Fan2'
 echo 'fan2.info Fan2 speed'
 echo 'fan3.label Fan3'
 echo 'fan3.info Fan3 speed'
 echo 'fan4.label Fan4'
 echo 'fan4.info Fan4 speed'
 echo 'fan5.label Fan5'
 echo 'fan5.info Fan5 speed'
 echo 'fan6.label Fan6'
 echo 'fan6.info Fan6 speed'
 exit 0
 fi
 /usr/bin/ipmi.php
</code></pre>

<p>Restart your <code>munin-node</code>, run the munin crons, and voila, graphs!
 With these settings they will look like this:</p>

<p><em>insert image</em></p>

<p>You can modify the params to change the graphs ofcourse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iptables: Creating persistent bans from Fail2Ban]]></title>
    <link href="https://rem.co/blog/2009/08/18/iptables-creating-persistent-bans-from-fail2ban/"/>
    <updated>2009-08-18T15:53:10+02:00</updated>
    <id>https://rem.co/blog/2009/08/18/iptables-creating-persistent-bans-from-fail2ban</id>
    <content type="html"><![CDATA[<p>On my servers I use the nifty program <a href="http://www.fail2ban.org/wiki/index.php/Main_Page">Fail2Ban</a> to perform logbased automatic firewalling of &lsquo;bad&rsquo; ip&rsquo;s.</p>

<p>The idea behind this is easy: Some IP performs an action I don&rsquo;t approve of. This can be any number of things, e.g. requesting pages in Apache that are commonly accessed by bots and/or scanners, or trying to log in to SSH with accounts that do not exist on the system. This bad behavior gets logged, and Fail2Ban keeps tabs on those logs, and using a number of rules it determines if a host is &lsquo;bad&rsquo; enough to temporarily or permanently ban all access to the server. It does so by adding a few chains to Iptables (one for each thing it checks for), and dynamically adding/removing IP&rsquo;s to/from these chains.</p>

<p>This all works perfectly. However, there&rsquo;s one issue; When Iptables gets reloaded, it restores its default rules, removing the Fail2Ban chains and all the rules they contain, even if the ip&rsquo;s in the chain were marked as permanent.</p>

<p>I created a workaround for this problem, consisting of two simple steps:</p>

<ul>
<li><p>When a &lsquo;bad&rsquo; ip gets banned, it&rsquo;s added to the Iptables chain, but also written to a file, containing all collected &lsquo;bad&rsquo; ip&rsquo;s. (I use <code>/etc/shitlist</code> for this purpose).</p></li>
<li><p>Whenever Iptables gets reloaded, I run a PHP script that checks the <code>/etc/shitlist</code> file for &lsquo;safe&rsquo; and duplicate ip&rsquo;s, and writes all other ip&rsquo;s to the permanent Blocklist chain. (The checking for &lsquo;safe&rsquo; ip&rsquo;s might be a bit unneeded, but with my Fail2Ban rules it&rsquo;s possible that one of my own ip&rsquo;s gets banned for 10 minutes if a SSH login attempt fails for 5 times. Though it&rsquo;s a temporary ban, the ip will still get written to the shitlist, and would end up in the permanent Blocklist).</p></li>
</ul>


<p>To make this work, I made the following changes:</p>

<p>Every <code>jail</code> in Fail2Ban uses an <code>action.d</code> script to perform (un)banning. I defaulted all actions to an action script called <code>iptables-allports.conf</code>. Basically this action drops everything in Iptables if a package originates from the &lsquo;bad&rsquo; IP.</p>

<p>I updated the ban action such that:</p>

<pre><code>actionban = iptables -I fail2ban-&lt;name&gt; 1 -s &lt;ip&gt; -j DROP
echo &lt;ip&gt; &gt;&gt; /etc/shitlist
</code></pre>

<p>After that I created a PHP script that updates Iptables with the ip&rsquo;s contained in the shitlist:</p>

<pre><code class="php shitlist.php">&lt;?php 
/** script that loads a shitlist file into iptables */ 
//CONFIG 
$shitlists = array("/root/list.txt","/etc/shitlist");
$chain = "Blocklist";
$safelist = array("x.x.x.x", "y.y.y.y", "z.z.z.z");

echo "Reading current IPTABLES state\r\n";
$data = shell_exec('iptables -S '.$chain);
$iparr = explode(' ',$data);
$j = 0;
$ref = array();
for($i=0;$i&lt;sizeof($iparr);$i++) {
    if(substr_count($iparr[$i],".")==3) {
        $ref[$j] = $iparr[$i];
         $j++;
     }
}
sort($ref);
$total = 0;
foreach($shitlists as $shitlist) {
    echo "Reading shitlist at $shitlist\r\n";
    //READ FILE
    $fh = fopen($shitlist,'r');
    if($fh) {
        $itt = 0;
        $iparr = array();
        while(!feof($fh)) {
            $ip = trim(fgets($fh));
            if(strlen($ip)&gt;6) {
                if(array_search($ip,$iparr)===false&amp;&amp;array_search($ip,$safelist)===false&amp;&amp;array_search($ip."/32",$ref)===false) {
                    $iparr[] = $ip;
                    echo "Now adding $ip to $chain\r\n";
                    $ins = 18+$itt;
                    shell_exec("iptables -I ".$chain." ".$ins." -s ".$ip."/32 -j DROP");
                    $itt++;
                }
            }
        }
        fclose($fh);
        echo "Finished adding $itt ip's from list $shitlist to chain $chain . Bye!\r\n";
        $total = $total + $itt;
    } else {
        echo "Could not open shitlist file $shitlist . Skipping this list\r\n";
    }
}
echo "Finished adding $total ip's to chain $chain from ".sizeof($shitlists)." shitlists.\r\n";
?&gt; 
</code></pre>

<p>You can run the script from the commandline (as root!) simply by stating <code>php shitlist.php</code>, or add it to the startup script of your Iptables installation.</p>

<p>Hope this helps keeping your NIC&rsquo;s available for VALID traffic!</p>

<h3>Update:</h3>

<p>Made some changes to the script to check for already existing bans, to keep your chains clean!</p>

<h3>Update 2:</h3>

<p>Little tweak to the script so it now loads an array of lists, in case you have various sources.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP: Testing the Pseudo Random Number Generator]]></title>
    <link href="https://rem.co/blog/2009/05/26/php-testing-the-pseudo-random-number-generator/"/>
    <updated>2009-05-26T18:44:44+02:00</updated>
    <id>https://rem.co/blog/2009/05/26/php-testing-the-pseudo-random-number-generator</id>
    <content type="html"><![CDATA[<p>Every programmer uses them.. <code>PRNG</code>&rsquo;s, better known as <em>Pseudo-Random Number Generators</em>; in PHP represented by the <a href="http://nl1.php.net/manual/en/function.rand.php"><code>rand(min,max)</code></a> function.</p>

<p>Unlike <em>True Random Number Generators</em> (<code>TRNG</code>&rsquo;s) that use true random data like atmospheric noise to create their numbers, <code>PRNG</code>&rsquo;s rely on software algorithms to come up with seemingly random numbers.. <em>but are they</em>?</p>

<p>And is there a difference between Linux and Windows <code>PRNG</code> results?
 <!-- more --></p>

<p>I decided to give it a little try, and came up with the following, very simple but yet quite test:</p>

<pre><code class="php Pseudo Random Number Generator Test ">&lt;?php
//init
$h = 500;
$w = 1000;
$colors = hexdec("FFFFFF");
$col = $colors/10;
$img = imagecreatetruecolor($w,$h);
$nul = 0;
$een = 0;
$twee = 0;
$drie = 0;
$vier = 0;
$vijf = 0;
$zes = 0;
$zeven = 0;
$acht = 0;
$negen = 0;
$tien = 0;
$tp = 0;

//cols
for($i=0;$i&lt;$h;$i++) {
 //rows
 for($j=0;$j&lt;$w;$j++) {         
 $k = rand(0,10);       
 imagesetpixel($img,$j,$i,($col*$k));       
 $tp++;         
 switch($k) {           
 case(0): $nul++; break;            
 case(1): $een++; break;            
 case(2): $twee++; break;           
 case(3): $drie++; break;           
 case(4): $vier++; break;           
 case(5): $vijf++; break;           
 case(6): $zes++; break;            
 case(7): $zeven++; break;          
 case(8): $acht++; break;           
 case(9): $negen++; break;
 case(10): $tien++; break;      
 }  
 } 
} 
$bl = imagecolorallocate($img,0,0,0); 
$or = imagecolorallocate($img,220,210,60); 
imagefilledrectangle($img,5,5,150,230,$bl); 
imagestring($img,3,10,10,"Nul: $nul (".round(($nul/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,30,"Een: $een (".round(($een/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,50,"Twee: $twee (".round(($twee/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,70,"Drie: $drie (".round(($drie/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,90,"Vier: $vier (".round(($vier/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,110,"Vijf: $vijf (".round(($vijf/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,130,"Zes: $zes (".round(($zes/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,150,"Zeven: $zeven (".round(($zeven/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,170,"Acht: $acht (".round(($acht/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,190,"Negen: $negen (".round(($negen/($tp/100)),2)."%)",$or); 
imagestring($img,3,10,210,"Tien: $tien (".round(($tien/($tp/100)),2)."%)",$or); 
header("Content-type: image/png"); imagepng($img); imagedestroy($img); 
?&gt;
</code></pre>

<p>Running this script will result in a noisy image, which when everything goes well, should be patternless (otherwise the results wouldn&rsquo;t be as random as they should be!).
For convenience I added a few counters, to display the spread of the numbers.</p>

<p>In my test results <strong>on both Windows and Linux</strong>, the results came up about equal each time:
There are no patterns in the images, significantly decreasing the chance of predicting the next number the <code>PRNG</code> will produce. (Which is important for various obvious matters).
Though there are no visible patterns, the number spread seems to be about equal each run.. <strong><em>9% for each of the 11 possibilities..</em></strong></p>

<p><img src="/images/prngtest-output.png"></p>

<p>I have my doubts about the randomness of such an equal spread.. but I&rsquo;m not drawing any conclusions just yet.. perhaps when I feel like investigating this further ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL: Boolean substitution]]></title>
    <link href="https://rem.co/blog/2009/04/27/mysql-boolean-substitution/"/>
    <updated>2009-04-27T00:00:00+02:00</updated>
    <id>https://rem.co/blog/2009/04/27/mysql-boolean-substitution</id>
    <content type="html"><![CDATA[<p>Today I faced a quite interesting problem, that originated from pure laziness.
I&rsquo;m developing a backend system for a quite complex database structure. Within this backend, an almost limitless amount of table views have to be created for the end user. Because I&rsquo;m extremely lazy, and didn&rsquo;t want to develop the html view code for each table view, I created a PHP html-table-generator-class, which takes a <code>mysql_result_set</code> as parameter, and outputs the html table in string format.</p>

<p>This method works great, unless for some cases, where a value in the query has to be substituted by a user readable value. A boolean is a good example of such a value.</p>

<!-- more -->


<h3>Booleans in MySQL</h3>

<p>Since MySQL doesn&rsquo;t natively support boolean values, there are various methods of saving booleans to a database. Common practices include fields of the format <code>CHAR(1)</code>, <code>TINYINT(1)</code> and <code>ENUM('Y','N')</code>. Recent versions of MySQL also include the <code>BIT</code> field format, which in fact boils down to using <code>TINYINT(1)</code>, when it comes to boolean values.</p>

<p>I always use the <code>TINYINT(1)</code> field format for my boolean columns. This works perfectly, since you can <code>INSERT</code> true/false values, which are automatically transformed to 1/0. When you <code>SELECT</code> a boolean column in PHP, this also works, since you can compare true/false to 1/0 within PHP. (Whether this loose type handling is preferable is a discussion for another time).</p>

<p>However.. when you <code>SELECT</code> a boolean column, and run it through a generic html table generator class such as mine, you&rsquo;ll end up with a nice table showing 1&rsquo;s and 0&rsquo;s, which aren&rsquo;t very user friendly (Having in mind that most backend users aren&rsquo;t quite as computer savvy as you are!). Replacing all 1&rsquo;s and 0&rsquo;s within the PHP code was not an option, since it would be a generic measure, and would also transform ID&rsquo;s and Prices and such. So I had to come up with a solution to substitute the boolean values within the MySQL result by human readable values.</p>

<h2>Substituting boolean values within a MySQL SELECT query</h2>

<p>The solution is in fact, as they usually are, quite simple. MySQL supports the use of the <code>REPLACE()</code> SQL command. Usually this command is used to <code>UPDATE</code> tables with replacement values, but it also works within a <code>SELECT</code> query to alter results. Having this in mind I started out replacing one value in the result:</p>

<pre><code class="sql">SELECT REPLACE(boolColumn,'1','true') AS booleanValue FROM tableName;
</code></pre>

<p>This works! There&rsquo;s a slight catch though, since &lsquo;false&rsquo; values also have to be substituted. After some fiddling with <code>IF</code> and <code>AND</code> constructions, the solutions was of course a lot easier:</p>

<pre><code class="sql">SELECT REPLACE(REPLACE(boolColumn,'0','false'),'1','true') AS booleanValue FROM tableName;
</code></pre>

<p>And there you have it.. value substitution 101 in MySQL. This method also works for your other substitution needs!</p>
]]></content>
  </entry>
  
</feed>
