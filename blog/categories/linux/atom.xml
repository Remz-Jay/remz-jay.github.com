<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | The Rem.co Blog]]></title>
  <link href="http://blog.rem.co/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://blog.rem.co/"/>
  <updated>2014-01-28T10:31:40+01:00</updated>
  <id>http://blog.rem.co/</id>
  <author>
    <name><![CDATA[Remco Overdijk]]></name>
    <email><![CDATA[remco@rem.co]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Fixing 'Error opening terminal: screen-256color.']]></title>
    <link href="http://blog.rem.co/blog/2013/06/06/fixing-error-opening-terminal-screen-256color-dot/"/>
    <updated>2013-06-06T00:00:00+02:00</updated>
    <id>http://blog.rem.co/blog/2013/06/06/fixing-error-opening-terminal-screen-256color-dot</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using <code>tmux</code> or <code>screen</code> as a wrapper for your terminal sessions (such as when using the <a href="http://www.drbunsen.org/the-text-triumvirate/">Text Triumvirate</a>), chances are that you are presented with the following error when you invoke a command that uses 256 color mode (such as <code>multitail</code> or <code>htop</code>):</p>

<pre><code>Error opening terminal: screen-256color.
</code></pre>

<p>I don&rsquo;t know if this is the recommended solution, but it&rsquo;s a pretty quick fix and seems to work on multiple distributions:</p>

<p><code>
cd /usr/share/terminfo/
cp x/xterm-256color s/screen-256color
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SELinux: Allowing SSH public key authentication]]></title>
    <link href="http://blog.rem.co/blog/2013/02/19/selinux-allowing-ssh-public-key-authentication/"/>
    <updated>2013-02-19T17:03:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/02/19/selinux-allowing-ssh-public-key-authentication</id>
    <content type="html"><![CDATA[<h3>The issue</h3>

<p>I experienced a seemingly weird issue with a freshly installed CentOS server today.</p>

<p>SSH Public key authentication was correctly set up; The <code>sshd_config</code> was properly configured and a <code>~/.ssh/authorized_keys</code> was present with the correct rights and verified correct contents (as the file was yanked from another, working, server with <code>scp</code>).</p>

<p>All attempts to connect to the machine using key authentication silently failed however.</p>

<!-- more -->


<p>
After debugging the usual <code>sshd</code> stuff i noticed the following entries in <code>/var/log/audit/audit.log</code>:</p>

<pre><code>type=USER_AUTH msg=audit(1361289386.691:2344): user pid=22997 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=pubkey acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=failed'
type=USER_AUTH msg=audit(1361289386.700:2347): user pid=22997 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=pubkey acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=failed'
</code></pre>

<p>Turns out that SELinux was interfering with the key authentication because there was no security context for the newly created <code>~/.ssh</code> directory.</p>

<h3>The solution</h3>

<p>The fix is pretty easy:</p>

<pre><code>$ restorecon -R -v /root/.ssh
</code></pre>

<p>After which key authentication started working and the messages in <code>audit.log</code> changed to:</p>

<pre><code>type=USER_AUTH msg=audit(1361289395.365:2351): user pid=22997 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=success acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=success'
type=USER_AUTH msg=audit(1361289715.705:2378): user pid=23033 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=pubkey_auth rport=41104 acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=? res=success'
type=USER_AUTH msg=audit(1361289715.705:2379): user pid=23033 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=key algo=ssh-rsa size=1023 fp=a4:5c:4d:16:61:8c:af:7f:ea:c7:95:ec:15:a9:20:66 rport=41104 acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=? res=success'
type=USER_AUTH msg=audit(1361289715.714:2382): user pid=23033 uid=0 auid=0 ses=99 subj=unconfined_u:system_r:sshd_t:s0-s0:c0.c1023 msg='op=success acct="root" exe="/usr/sbin/sshd" hostname=? addr=81.81.21.231 terminal=ssh res=success'
</code></pre>

<p>Win!</p>

<blockquote><p>No actual IP addresses or fingerprints were harmed during the creation of this article.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu: Automatically selecting a fast mirror]]></title>
    <link href="http://blog.rem.co/blog/2013/01/22/ubuntu-automatically-selecting-a-fast-mirror/"/>
    <updated>2013-01-22T12:04:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/22/ubuntu-automatically-selecting-a-fast-mirror</id>
    <content type="html"><![CDATA[<p>Letting Ubuntu pick the <code>apt-get</code> mirror closest to you is pretty easy.</p>

<p>Just add these mirror directives to the top of <code>/etc/apt/sources.list</code> and you&rsquo;re good to go:</p>

<p><code>
deb mirror://mirrors.ubuntu.com/mirrors.txt precise main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-updates main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-backports main restricted universe multiverse
deb mirror://mirrors.ubuntu.com/mirrors.txt precise-security main restricted universe multiverse
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Munin: failing with Storable error]]></title>
    <link href="http://blog.rem.co/blog/2013/01/21/munin-failing-with-storable-error/"/>
    <updated>2013-01-21T17:29:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/21/munin-failing-with-storable-error</id>
    <content type="html"><![CDATA[<p>I suffered from a Munin version 2.0.10 installation that refused to update the majority of the graphs. Only the first two of a long list were being updated, the rest all &lsquo;hung&rsquo; at the same moment.</p>

<p>After a little investigating, the problem surfaced:</p>

<p><code>bash
$ su - munin --shell=/bin/bash munin-cron
File is not a perl storable at blib/lib/Storable.pm (autosplit into blib/lib/auto/Storable/fd_retrieve.al) line 398, at /usr/lib64/perl5/vendor_perl/5.12.4/Munin/Master/Utils.pm line 362
File is not a perl storable at blib/lib/Storable.pm (autosplit into blib/lib/auto/Storable/fd_retrieve.al) line 398, at /usr/lib64/perl5/vendor_perl/5.12.4/Munin/Master/Utils.pm line 362
</code></p>

<!-- more -->


<p>I started out by fixing all items the <code>munin-check</code> script suggested, which is always a good starting point.
Execute the script in a similar fashion as you would do with <code>munin-cron</code>:</p>

<p><code>bash
$ su - munin --shell=/bin/bash munin-check
</code>
Correct all reported errors and check your cron again.</p>

<p>In this particular case this didn&rsquo;t solve the issue however. There appeared to be some <code>.storable</code> files in the munin directory, which sounded like viable suspects according to the error messages:</p>

<p><code>bash
$ find /var/lib/munin/ -type f | grep storable
/var/lib/munin/datafile.storable
/var/lib/munin/htmlconf.storable
/var/lib/munin/limits.storable
/var/lib/munin/state-server-server.storable
</code></p>

<p>Turns out one of these was the culprit, as moving/deleting them fixed the issue; cron has resumed normal operation.
<code>bash
$ cd /var/lib/munin/ &amp;&amp; mv *.storable ~
$ su - munin --shell=/bin/bash munin-cron
$
</code></p>

<p>Best part of it is that the data collection doesn&rsquo;t seem to have been interrupted in the meantime; All graphs are up2date and have a complete history. Problem solved!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gentoo: Updating and Cleaning]]></title>
    <link href="http://blog.rem.co/blog/2013/01/16/updating-and-cleaning-your-gentoo-linux-server/"/>
    <updated>2013-01-16T23:40:00+01:00</updated>
    <id>http://blog.rem.co/blog/2013/01/16/updating-and-cleaning-your-gentoo-linux-server</id>
    <content type="html"><![CDATA[<p><img class="left <a" src="href="http://www.gentoo.org/images/gblend.png">http://www.gentoo.org/images/gblend.png</a>" width="100" height="100"> Keeping your Gentoo Linux server up to date isn&rsquo;t as straightforward as let&rsquo;s say an Ubuntu box, where you would just run <code>$ apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get clean</code> for example.</p>

<p>Gentoo is far too flexible for a <em>one size fits all</em> approach. The commands outlined below come pretty close for daily use though:</p>

<p><div><script src='https://gist.github.com/2835011.js'></script>
<noscript><pre><code>emerge --sync &amp;&amp; emerge -uDNav --with-bdeps=y @world
emerge --depclean &amp;&amp; revdep-rebuild &amp;&amp; eclean-dist</code></pre></noscript></div>
</p>

<!-- more -->


<p>We start by syncing the portage tree, required to obtain the latest packages.
After which we update the &ldquo;world&rdquo; group (which would entail all packages currently installed) with a couple of options:</p>

<p>-u : Update</p>

<p>-D : Deep, includes updates to prerequisites for packages registered in your world favorites</p>

<p>-N : NewUSE, checks for changes to your USE flags (usually registered in <code>/etc/make.conf</code>or <code>/etc/portage/package.use</code>)</p>

<p>-a : Ask, will show a dialog asking you of the packages to be merged are OK with you. Very useful when you invoke these commands manually, as I do every day. It gives you a last minute escape in case some crucial (like <code>sys-fs/udev</code>) or large (like <code>sys-devel/gcc</code>) package is about to be merged which you really aren&rsquo;t in the mood for.</p>

<p>-v : Verbose, gives more useful output, including the selected USE flags for packages. (Which enables you to spot obvious errors early on).</p>

<p>&mdash;with-bdeps=y : Includes build time dependencies, and is useful for solving some common merge errors. (This can also be done by setting <code>EMERGE_DEFAULT_OPTS="--with-bdeps=y"</code> in <code>/etc/make.conf</code>)</p>

<p>That should suffice to update about every update-able package on your system.</p>

<p><strong>Always make sure to read <em>and follow</em> the instructions that appear after the merge!</strong><br/>
This is exactly why the second line is mentioned separately and isn&rsquo;t concatenated after the first; It gives you opportunity to execute the required steps for crucial packages that might otherwise break your system.</p>

<p>After that we proceed with some basic cleanup:</p>

<ul>
<li>Remove obsolete packages with <code>emerge --depclean</code>.</li>
<li>Check for broken dependencies/links with <code>revdep-rebuild</code>which will automatically fix the issues.</li>
<li>Delete obsolete distfiles (downloaded source packages, required to merge the binaries) for packages that no longer exist on the system with <code>eclean-dist</code>.</li>
</ul>


<p>Running the sequence above on a regular schedule should ensure that you have a smooth running system!</p>

<p>Got improvements or comments on the procedure outlined above? I&rsquo;d love to hear them in the comments below.</p>
]]></content>
  </entry>
  
</feed>
